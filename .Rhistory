a
a <- str_extract(ci, "..M..D..M")
a
a <- str_extract(ci, "..M..D..M", dot_all=TRUE, case_insensitive=TRUE)
a
ci <- c(ci, "400M200D300M")
a <- str_extract(ci, "..M..D..M", dot_all=TRUE, case_insensitive=TRUE)
a
a <- str_extract(ci, "..[M]..[D]..[M]")
a
a <- str_extract(ci, "\\d[M]\\d[D]\\d[M]")
a
a <- str_extract(ci, "[M][D|I][M]")
ci <- c(ci,"20M50I40M")
a <- str_extract(ci, "[M][D|I][M]")
a
a <- str_extract(ci, "[M]+[D|I]+[M]")
a
a <- str_extract(ci, "[M]\\+[D|I]\\+[M]")
a
a <- str_extract(ci, "{2,}[M]{2,}[D|I]{2,}[M]")
a <- str_extract(ci, "[M]\\+?[D|I]\\+?[M]")
a
a <- str_extract(ci, "+?[M]+?[D|I]+?[M]")
a
a <- str_extract(ci, "[M]+>.*?</[D|I][M]")
a
a <- str_extract(ci, "[M]+>.*?</[D|I]+>.*?</[M]")
a
a <- str_extract(ci, "[M]*[D|I]*[M]")
a
a <- str_extract(ci, "[M]//*[D|I]//*[M]")
a
a <- str_extract(ci, "\\w+(?=[M.])")
a
a <- str_detect(ci, "(\[).+?(\])[M](\[).+?(\])[D|I](\[).+?(\])[M]")
a <- str_detect(ci, "[.+?][M][.+?][D|I][+?][M]")
a
a <- str_detect(ci, "[.+?][M][.+?][D|I][.+?][M]")
a
a <- str_detect(ci, "[.+][M][.+][D|I][.+][M]")
a
a <- str_detect(ci, ".+[M].+[D|I].+[M]")
z
a
ci <- c(ci, "120M")
a <- str_detect(ci, ".+[M].+[D|I].+[M]")
a
a <- str_extract(ci, ".+[M].+[D|I].+[M]")
a
a <- str_extract(ci, "[^abc][M][^abc][D|I][^abc][M]")
a
a <- str_extract(ci, "[1-9][M][1-9][D|I][1-9][M]")
a
a <- str_extract(ci, "[1-9,][M][1-9,][D|I][1-9,][M]")
a
a <- str_extract(ci, "[:digit:][M][:digit:][D|I][:digit:][M]")
a
a <- str_extract(ci, "[:digit:]{2,3}[M][:digit:]{2,3}[D|I]{2,3}[:digit:][M]")
a
a <- str_extract(ci, "\\d+[M]\\d+[D|I]\\d+[M]")
a
cl
ci
paste0(ci, sep=",")
paste0(ci, collapse=",")
paste0(ci, collapse='","')
paste0(ci, collapse=",")
f <- str_extract(a, "^\\d+[M]")
f
f <- str_extract(a, "^\\d+")
f
f <- str_extract(a, "[M]?\\d+[D]")
f
D <- str_extract(a, "[M]?\\d+[D]")
D <- str_extract(a, "[M]?\\d+(?D)")
D <- str_extract(a, "[M]?\\d+(?=D)")
D
a
D <- str_extract(a, "(M=?)?\\d+(?=D)")
D
D <- str_extract(a, "(?M=?)?\\d+(?=D)")
D <- str_extract(a, "(?M)?\\d+(?=D)")
D <- str_extract(a, "(M)?\\d+(?=D)")
D
D <- str_extract(a, "(M=?)?\\d+(?=D)")
D
D <- str_extract(a, "(?=M)?\\d+(?=D)")
D <- str_extract(a, "(?=M)\\d+(?=D)")
D
D <- str_extract(a, "(?=M?)?\\d+(?=D)")
D <- str_extract(a, "(?=M?)\\d+(?=D)")
D
f <- str_extract(a, "\\d+[M]")
f
frontMatch <- str_extract(a, "\\d+[M]")
frontMatch
ci
endMatch <- str_extract(a, "(?=D)\\d+(?=M?)")
endMatch
endMatch <- str_extract(a, "(?=D?)\\d+(?=M?)")
endMatch
delMatch <- str_extract(a, "(?=M?)\\d+(?=D?)")
delMatch
delIns_flankedbyMatch_CIGAR <- str_extract(ci, "\\d+[M]\\d+[D|I]\\d+[M]")
a <- delIns_flankedbyMatch_CIGAR <- str_extract(ci, "\\d+[M]\\d+[D|I]\\d+[M]")
frontMatch <- str_extract(a, "\\d+[M]")
endMatch <- str_extract(a, "(?=D?)\\d+(?=M?)")
delMatch <- str_extract(a, "(?=M?)\\d+(?=D?)")
InsMatch <- str_extract(a, "(?=M?)\\d+(?=I?)")
frontMatch
endMatch
delMatch
InsMatch
frontMatch <- str_extract(a, "\\d+(?=M?)")
frontMatch
a
endMatch <- str_extract(a, "(=D?)\\d+(?=M)")
endMatch
endMatch <- str_extract(a, "(?=D)\\d+(?=M)")
endMatch
delMatch <- str_extract(a, "(?=M?)\\d+(?=D)")
delMatch
InsMatch <- str_extract(a, "(?=M?)\\d+(?=I)")
InsMatch
endMatch <- str_extract(a, "(?=D?)\\d+(?=M)")
endMatch
a
endMatch <- str_extract(a, "(?=D?)\\d+(?=M$)")
endMatch
which
which(R)
which(r)
R.home
R.home()
gc()
restart.R
Restart.R
rm(list = ls())
q()
q()
R.Version()
R.home()
install.packages("tidyverse")
install.packages("BiocManager", repos = "https://cloud.r-project.org")
BiocManager::install("Biostrings")
BiocManager::install("ShortRead")
BiocManager::install("dada2")
# BiocManager::install("Biostrings")
# BiocManager::install("ShortRead")
# BiocManager::install("dada2")
library(Biostrings)
library(ShortRead)
# BiocManager::install("ShortRead")
BiocManager::install("ShortRead")
install.packages("deldir")
install.packages("deldir")
BiocManager::install("ShortRead")
library(dada2)
BiocManager::install("dada2")
BiocManager::install("ShortRead")
BiocManager::install("Rsamtools")
BiocManager::install("Rsamtools")
ource("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
?BiocUpgrade
??BiocUpgrade
BiocManager
install.packages("tidyverse")
install.packages("textshaping")
install.packages("usethis", verbose=TRUE)
install.packages("textshaping")
install.packages("tidyverse")
install.packages("ragg")
install.packages("tidyverse")
BiocManager::install("dada2")
BiocManager::install("Rsamtools")
BiocManager::install("Rhtslib")
BiocManager::install("Rhtslib", force = TRUE)
BiocManager::install("Rsamtools")
BiocManager::install("Rsamtools")
BiocManager::install("ShortRead")
BiocManager::install("Rsamtools")
library(Rsamtools)
BiocManager::install("Rsamtools")
BiocManager::install("Rsamtools", force=TRUE)
.libPaths()
BiocManager::install("Rsamtools", force=TRUE)
BiocManager::install("scPipe")
BiocManager::install("Rsamtools", force=TRUE)
BiocManager::install("biocLite")
install.packages("biocLite")
BiocManager::install('grimbough/Rhtslib')
BiocManager::install("remotes")
BiocManager::install('grimbough/Rhtslib')
BiocManager::install('grimbough/Rhtslib')
BiocManager::install('grimbough/Rhtslib')
BiocManager::install("Rsamtools", force=TRUE)
install.packages("pacman")
p_install("Rsamtools")
library(pacman)
p_install("Rsamtools")
remove.packages(Rsamtools)
remove.packages("Rsamtools")
remove.packages("Rsamtools")
p_install("Rsamtools")
remove.packages("Rsamtools")
BiocManager::install('Rhtslib')
BiocManager::install("ShortRead")
R.version
BiocManager::install("ShortRead")
BiocManager::install("ShortRead")
R.version()
R.Version()
.libPaths()
.libPaths(new="/Users/jasvinder/micromamba/lib/R/library")
library(dada2)
knitr::opts_chunk$set(echo = TRUE)
# BiocManager::install("Biostrings")
# BiocManager::install("ShortRead")
# BiocManager::install("dada2")
library(Biostrings)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rsamtools")
BiocManager::install("Rsamtools")
# BiocManager::install("Biostrings")
# BiocManager::install("ShortRead")
# BiocManager::install("dada2")
library(Biostrings)
library(ShortRead)
# BiocManager::install("dada2")
BiocManager::install("dada2")
BiocManager::valid()
BiocManager::install(c(
"ape", "backports", "BH", "Biobase", "BiocGenerics", "bit", "bit64",
"bitops", "blob", "broom", "callr", "car", "caTools", "cli", "clipr",
"coda", "colorspace", "colourpicker", "conquer", "corrplot", "covr",
"cowplot", "crayon", "crosstalk", "curl", "data.table", "DBI", "dbplyr",
"deldir", "DEoptimR", "desc", "devtools", "diffobj", "digest", "diptest",
"DNAcopy", "doParallel", "dplyr", "dqrng", "DT", "e1071", "ellipsis",
"expm", "fansi", "farver", "fastICA", "fastmap", "fitdistrplus", "flexmix",
"forcats", "foreach", "Formula", "fpc", "fs", "future", "future.apply",
"gdtools", "generics", "ggplot2", "ggrepel", "ggridges", "ggsignif", "gh",
"git2r", "globals", "glue", "gplots", "graph", "gtools", "haven", "hdf5r",
"hexbin", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets",
"httpuv", "httr", "igraph", "isoband", "iterators", "jpeg", "jsonlite",
"knitr", "labeling", "later", "leiden", "lifecycle", "limma", "littler",
"lme4", "lmtest", "lubridate", "magrittr", "maptools", "MatrixModels",
"matrixStats", "mclust", "memoise", "mime", "mvtnorm", "openssl",
"openxlsx", "patchwork", "pbapply", "pbkrtest", "pillar", "pkgbuild",
"pkgKitten", "pkgload", "plotly", "processx", "promises", "proxy", "ps",
"quantreg", "R.methodsS3", "R.oo", "R6", "rappdirs", "RBGL", "rcmdcheck",
"Rcpp", "RcppAnnoy", "RcppArmadillo", "RcppEigen", "RcppParallel", "readr",
"remotes", "reprex", "reticulate", "rio", "rjags", "rlang", "rmarkdown",
"robustbase", "roxygen2", "rprojroot", "rstatix", "rstudioapi", "rsvd",
"rversions", "rvest", "sandwich", "sctransform", "Seurat", "sf", "shiny",
"shinyjs", "sitmo", "slam", "sodium", "sp", "SparseM", "statmod",
"stringi", "svglite", "sys", "systemfonts", "testit", "testthat", "tibble",
"tidyr", "tidyselect", "tidyverse", "tinytex", "units", "usethis", "utf8",
"uwot", "vctrs", "vdiffr", "vegan", "VennDiagram", "VGAM", "viridis",
"viridisLite", "withr", "xfun", "XML", "zip", "zoo"
), update = TRUE, ask = FALSE)
# BiocManager::install("Biostrings")
# BiocManager::install("ShortRead")
# BiocManager::install("dada2")
library(Biostrings)
library(ShortRead)
BiocManager::install("ShortRead")
BiocManager::install("ShortRead")
library(Rsamtools)
BiocManager::install("Rsamtools", force=TRUE)
library(Rsamtools)
BiocManager::install("Rsamtools", type="source")
BiocManager::install()
BiocManager::install("Rsamtools", version = "2.18.0")
BiocManager::install("Rsamtools", version = "2.18")
BiocManager::install("Rsamtools", version = "2.16")
BiocManager::install("Rsamtools", version = "2")
BiocManager::install("Rsamtools", version = 2.18.0)
BiocManager::install(c("GenomicRanges", "Biostrings", "zlibbioc"))
BiocManager::install(c("GenomicRanges", "Biostrings", "zlibbioc"), force=TRUE)
BiocManager::install(c("ShortReads", "dada2"))
BiocManager::install(c("GenomicAlignments"))
library(dada2)
BiocManager::install("dada2")
BiocManager::install(c("GenomicAlignments"))
log(32)
log(32, 2)
log2(32)
install.packages(c("DBI", "RODBC", "odbc", "dplyr", "dbplyr"))
## install.packages(c("DBI", "RODBC", "odbc", "dplyr", "dbplyr"))
## Import required packages
library(DBI)
library(RODBC)
install.packages("RODBC")
library(RODBC)
install.packages("RODBC")
library(RODBC)
library(odbc)
install.packages("odbc")
library(odbc)
library(dplyr)
library(dbplyr)
sort(unique(odbcListDrivers()[[1]]))
.libPaths()
library(DBI)
library(dplyr)
library(dbplyr)
## mypassword = {}!
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = mypassword)
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = mypassword)
library(DBI)
library(dplyr)
library(dbplyr)
## mypassword = {}!
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = mypassword)
mypassword="Rconnect1"
library(DBI)
library(dplyr)
library(dbplyr)
## mypassword = {}!
conn <- dbConnect(RMySQL::MySQL(),
dbname = "",
Server = "localhost",
port = 3306,
user = "root",
password = mypassword)
knitr::opts_chunk$set(connection = "conn", echo = TRUE, comment = NA, message = FALSE, warning = FALSE)
?dbConnect
library(DBI)
library(dplyr)
library(dbplyr)
conn <- dbConnect(RPostgres::Postgres(),
dbname = "jasvinder",
Server = "localhost",
port = 5432,
user = "root",
password = "Rconnect1")
conn <- dbConnect(RPostgres::Postgres(),
dbname = "jasvinder",
Server = "localhost",
port = 5432,
user = "user",
password = "Rconnect1")
devtools::install_github("rstats-db/RPostgres")
install.packages("devtools")
library(RPostgres)
devtools::install_github("rstats-db/RPostgres")
devtools::install_github("rstats-db/RPostgres")
library(RPostgres)
library(DBI)
library(dplyr)
library(dbplyr)
# devtools::install_github("rstats-db/RPostgres")
conn <- dbConnect(RPostgres::Postgres(),
dbname = "jasvinder",
Server = "localhost",
port = 5432,
user = "user",
password = "Rconnect1")
# devtools::install_github("rstats-db/RPostgres")
conn <- dbConnect(RPostgres::Postgres(),
host = "localhost",
port = 5432,
dbname = "jasvinder",
user = "user",
password = "Rconnect1")
# devtools::install_github("rstats-db/RPostgres")
conn <- dbConnect(RPostgres::Postgres(),
host = "localhost",
port = 5432,
dbname = "jasvinder",
user = "jasvinder",
password = "Rconnect1")
library(RPostgres)
library(DBI)
library(dplyr)
library(dbplyr)
# devtools::install_github("rstats-db/RPostgres")
conn <- dbConnect(RPostgres::Postgres(),
host = "localhost",
port = 5432,
dbname = "sql_assignment_ik",
user = "jasvinder",
password = "Rconnect1")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, connection = "conn")
# devtools::install_github("rstats-db/RPostgres")
conn <- dbConnect(RPostgres::Postgres(),
host = "localhost",
port = 5432,
dbname = "sql_assignment_ik",
user = "jasvinder",
password = "Rconnect1")
gc()
library(tidyverse)
library(tidyverse)
data(iris)
iris
glimpse(iris)
ggplot(data = iris, aes(x=Sepal.Length, y=Petal.Width))+geom_point()
ggplot(data = iris, aes(x=Sepal.Length, y=Petal.Width,color=Species, size=Sepal.Width))+geom_point()
ggplot(data = iris, aes(x=Sepal.Length, y=Petal.Width,color=Species, size=Sepal.Width, alpha=0.3))+geom_point()
9911-134
96/(96+70)
9707/(9707+108)
96/9777
70/9777
26/134
108/(108+9707)
25/0.011
(26*9709)/(107X70)
library(readxl)
dataset1 <- read_excel("Downloads/dataset1.xlsx",
sheet = "Patients")
View(dataset1)
library(readxl)
url <- "https://docs.google.com/spreadsheets/d/10mxZ84WHzKXd7saBWE1c5PGUszXZksZx/"
destfile <- "X10mxZ84WHzKXd7saBWE1c5PGUszXZksZx.xls"
curl::curl_download(url, destfile)
X10mxZ84WHzKXd7saBWE1c5PGUszXZksZx <- read_excel(destfile)
?read_excel
Patients <- read_excel("Downloads/dataset1.xlsx", sheet = "Patients")
Markers <- read_excel("Downloads/dataset1.xlsx", sheet = "Markers")
glimpse(Markers)
?separate
Markers_2019_onwards <- Markers %>%
separate(`Blood draw date`, sep="-", into=c("yr", "month", "day"))
Markers_2019_onwards %>% glimpse()
Markers_2019_onwards <- Markers %>%
separate(`Blood draw date`, sep="-", into=c("yr", "month", "day"), convert=TRUE) %>%
Markers_2019_onwards <- Markers %>%
separate(`Blood draw date`, sep="-", into=c("yr", "month", "day"), convert=TRUE)
Markers_2019_onwards %>% glimpse()
Markers_2019_onwards <- Markers %>%
separate(`Blood draw date`, sep="-", into=c("yr", "month", "day"), convert=TRUE) %>%
mutate(yr = as.numeric(yr)) %>%
filter(yr >= 2019)
Markers_2019_onwards %>% glimpse()
?left_join
combined_table = left_join(Markers_2019_onwards, Patients, by = "patient_ID")
Patients %>% glimpse()
combined_table = left_join(Markers_2019_onwards, Patients, by = c("patient_ID"=`Patient ID`))
combined_table = left_join(Markers_2019_onwards, Patients, by = c("patient_ID"="Patient ID"))
combined_table %>% glimpse()
combined_table$Marker %>% unique()
Patients <- read_excel("Downloads/dataset2.xlsx", sheet = "Samples")
Markers <- read_excel("Downloads/dataset2.xlsx", sheet = "Counts")
Samples <- read_excel("Downloads/dataset2.xlsx", sheet = "Samples")
Counts <- read_excel("Downloads/dataset2.xlsx", sheet = "Counts")
View(Counts)
View(Samples)
View(Counts)
View(Samples)
View(Counts)
View(Counts)
View(Samples)
View(Counts)
View(Samples)
View(Counts)
glimpse(Counts)
counts.T
as.matrix(Counts).T
Counts.T
counts = as.matrix(Counts)
counts.T
transpose(Counts)
pca_result = prcomp(Counts)
Counts %>% glimpse()
standardize_counts <- scale(Counts(LL14:LL16))
standardize_counts <- scale(Counts[LL14:LL16])
standardize_counts <- scale(Counts %>% dplyr::select(LL14:LL16))
pca_result = prcomp(standardize_counts)
summary(pca_result)
pca_result$rotation
plot(pca_result, main="Scree Plot")
plot(pca_result, main="PCA Biplot")
plot(pca_result, main="PCA Biplot")
plot(pca_result, main="Scree Plot")
pca_data <- as_tibble(pca_result)
pca_data <- data.frame(pca_result)
pca_data <- as_tibble(pca_result$x)
pca_data$genes <- Counts$gene_id
Counts_transpose = T(Counts)
Counts_transpose = t(Counts)
Counts_transpose
standardize_counts <- scale(Counts_transpose %>% dplyr::select(LL14:LL16))
Counts_transpose = t(Counts) %>% as_tibble()
Counts_transpose
Counts_transpose = t(Counts) %>% as_tibble(colnames=TRUE)
Counts_transpose
col_names <- Counts_transpose[1, ]
col_names
install.packages("RWordPress")
if (!requireNamespace("remotes")) install.packages("remotes")
remotes::install_github("GeoffStrydom/knit2wp")
setwd("~/Documents/jasvinder-site")
